// Generated by CoffeeScript 1.6.3
(function() {
  var $sandbox, bindButtons, bindPlasmid, bindSidemenu, completeUpdate, draggingFlag, iterationSpeed, pause, plasmid, play, playTimer, resetSandbox, solvableWorker, stopBeforeModification, toggleIcon, togglePlaying, updateFlag, updateInfo, updateInfoSimulatneously, updateStartTime;
  $sandbox = null;
  plasmid = null;
  playTimer = false;
  iterationSpeed = 60;
  solvableWorker = new Worker('js/plasmid_worker_solvable.js');
  draggingFlag = false;
  bindPlasmid = function() {
    var $canvas, toggle;
    toggle = function(e, reset) {
      if (reset == null) {
        reset = false;
      }
      plasmid.toggleCellIfNew(e.offsetX, e.offsetY, reset);
      return updateInfoSimulatneously();
    };
    $canvas = $sandbox.children('canvas');
    return $canvas.mousedown(function() {
      draggingFlag = true;
      return toggle(event, true);
    }).mouseup(function() {
      return draggingFlag = false;
    }).mousemove(function(event) {
      if (draggingFlag) {
        return toggle(event);
      }
    });
  };
  resetSandbox = function() {
    plasmid = new CanvasWorkerPlasmidLL($sandbox);
    return bindPlasmid();
  };
  play = function() {
    return plasmid.propagate(function() {
      updateInfoSimulatneously();
      return playTimer = setTimeout(play, iterationSpeed - plasmid.propagationTime);
    });
  };
  pause = function() {
    if (playTimer !== false) {
      plasmid.stop();
      clearTimeout(playTimer);
      return playTimer = false;
    }
  };
  toggleIcon = function($button, iconStr1, iconStr2) {
    var now, to;
    now = $button.data('toggle');
    to = now === iconStr1 ? iconStr2 : iconStr1;
    $button.children().eq(0).removeClass("glyphicon-" + now).addClass("glyphicon-" + to);
    $button.data('toggle', to);
    return now;
  };
  togglePlaying = function() {
    if (toggleIcon($('#sandbox-toggle'), 'play', 'pause') === 'play') {
      return play();
    } else {
      return pause();
    }
  };
  bindButtons = function() {
    $('#sandbox-toggle').click(function() {
      return togglePlaying();
    });
    $('#sandbox-step').click(function() {
      plasmid.propagate();
      return updateInfoSimulatneously();
    });
    $('#sandbox-refresh').click(function() {
      return resetSandbox();
    });
    return $('#sandbox-random').click(function() {
      var col, i, row, total, _i;
      total = plasmid.int(plasmid.row * plasmid.col / 4);
      for (i = _i = 0; 0 <= total ? _i < total : _i > total; i = 0 <= total ? ++_i : --_i) {
        row = plasmid.int(plasmid.rand() * plasmid.row) + 1;
        col = plasmid.int(plasmid.rand() * plasmid.col) + 1;
        plasmid.cells[row][col] = 1;
      }
      return plasmid.render();
    });
  };
  stopBeforeModification = function() {
    if (playTimer !== false) {
      return togglePlaying();
    }
  };
  updateFlag = -1;
  updateStartTime = 0;
  completeUpdate = function() {
    return $('#query-update-time').text(plasmid.time() - updateStartTime);
  };
  solvableWorker.onmessage = function(event) {
    $('#query-groups').text(event.data);
    $('#query-solvable').text(event.data === 1);
    updateFlag--;
    if (updateFlag === 0) {
      return completeUpdate();
    }
  };
  updateInfo = function() {
    updateFlag = 1;
    updateStartTime = plasmid.time();
    $('#query-propagation-time').text(plasmid.propagationTime);
    return solvableWorker.postMessage(plasmid.dump(false, false));
  };
  updateInfoSimulatneously = function() {
    if ($('#update-simultaneously:checked').length > 0) {
      return updateInfo();
    }
  };
  bindSidemenu = function() {
    $('#iteration-speed').change(function() {
      iterationSpeed = plasmid.int($(this).val());
      if (isNaN(iterationSpeed)) {
        iterationSpeed = 60;
      }
      if (iterationSpeed <= 0) {
        iterationSpeed = 1;
      }
      return $(this).val(iterationSpeed);
    });
    $('#sandbox-size-btn').click(function() {
      var c, d, data, i, j, newSize, old, scale, scaleFunction, size, _i, _j;
      stopBeforeModification();
      size = plasmid.col;
      newSize = plasmid.int($('#sandbox-size').val());
      scale = $('#sandbox-size-scale:checked').length;
      data = null;
      if (scale) {
        old = plasmid.dump(false, false);
        data = plasmid.matrix(newSize + 2, newSize + 2);
        d = size / newSize;
        c = 0.5 * (1 - d);
        scaleFunction = function(x) {
          return Math.round(d * x + c);
        };
        for (i = _i = 1; 1 <= newSize ? _i <= newSize : _i >= newSize; i = 1 <= newSize ? ++_i : --_i) {
          for (j = _j = 1; 1 <= newSize ? _j <= newSize : _j >= newSize; j = 1 <= newSize ? ++_j : --_j) {
            data[i][j] = old[scaleFunction(i)][scaleFunction(j)];
          }
        }
      }
      $sandbox.data('col', newSize).data('row', newSize);
      resetSandbox();
      if (scale) {
        return plasmid.dump(data, false);
      }
    });
    $('#reverse-btn').click(function() {
      var data, i, j, size, _i, _j;
      stopBeforeModification();
      data = plasmid.dump(false);
      size = plasmid.col;
      for (i = _i = 1; 1 <= size ? _i <= size : _i >= size; i = 1 <= size ? ++_i : --_i) {
        for (j = _j = 1; 1 <= size ? _j <= size : _j >= size; j = 1 <= size ? ++_j : --_j) {
          data[i][j] = 1 - data[i][j];
        }
      }
      return plasmid.dump(data, false);
    });
    $('#punch-btn').click(function() {
      var I, J, c, cells, col, count_new, count_old, d, dir, heap, i, j, row, x, y, _i, _j, _k, _l, _len, _len1, _m, _n, _o, _p;
      cells = plasmid.cells;
      dir = [[1, 0], [-1, 0], [0, 1], [0, -1]];
      col = cells.length - 2;
      row = cells[0].length - 2;
      count_old = 0;
      for (i = _i = 1; _i <= col; i = _i += 1) {
        for (j = _j = 1; _j <= row; j = _j += 1) {
          if (cells[i][j] === 0) {
            count_old++;
            heap = [];
            heap.push([i, j]);
            cells[i][j] = 1;
            while (heap.length) {
              c = heap.pop();
              for (_k = 0, _len = dir.length; _k < _len; _k++) {
                d = dir[_k];
                x = c[0] + d[0];
                y = c[1] + d[1];
                if (x > 0 && y > 0 && x <= col && y <= row && cells[x][y] === 0) {
                  cells[x][y] = 1;
                  heap.push([x, y]);
                }
              }
            }
          }
        }
      }
      for (I = _l = 1; _l <= col; I = _l += 1) {
        for (J = _m = 1; _m <= row; J = _m += 1) {
          if (cells[I][J] === 1) {
            plasmid.cells[I][J] = cells[I][J] = 0;
            count_new = 0;
            for (i = _n = 1; _n <= col; i = _n += 1) {
              for (j = _o = 1; _o <= row; j = _o += 1) {
                if (cells[i][j] === 0) {
                  count_new++;
                  heap = [];
                  heap.push([i, j]);
                  cells[i][j] = 1;
                  while (heap.length) {
                    c = heap.pop();
                    for (_p = 0, _len1 = dir.length; _p < _len1; _p++) {
                      d = dir[_p];
                      x = c[0] + d[0];
                      y = c[1] + d[1];
                      if (x > 0 && y > 0 && x <= col && y <= row && cells[x][y] === 0) {
                        cells[x][y] = 1;
                        heap.push([x, y]);
                      }
                    }
                  }
                }
              }
            }
            if (count_old === count_new) {
              plasmid.cells[I][J] = cells[I][J] = 0;
            }
          }
        }
      }
      return plasmid.render();
    });
    $('#query-btn').click(function() {
      return updateInfo();
    });
    return $('#sandbox-rule-btn').click(function() {
      $sandbox.data('rule', $('#sandbox-rule').val());
      return resetSandbox();
    });
  };
  return $(function() {
    $sandbox = $('#sandbox');
    resetSandbox();
    bindButtons();
    bindSidemenu();
    return $('#col-sandbox').css('height', ($('#col-control').height() + 2) + 'px');
  });
})();
